plugins {
    id 'base'
    id 'org.asciidoctor.jvm.pdf' version '3.3.0'
    id 'org.asciidoctor.jvm.gems' version '3.3.0'
    id 'org.asciidoctor.jvm.revealjs' version '3.3.0'
}

allprojects {
    version = '1.0.0-SNAPSHOT'
}

subprojects { Project project ->
    apply plugin:  'org.asciidoctor.jvm.pdf'
    apply plugin: 'org.asciidoctor.jvm.gems'
    apply plugin: 'org.asciidoctor.jvm.revealjs'

    repositories {
        ruby.gems()
    }

    dependencies {
        asciidoctorGems 'rubygems:rouge:3.15.0'
    }

    asciidoctorPdf {
        sourceDir file("src/docs")

        dependsOn asciidoctorGemsPrepare

        baseDirFollowsSourceFile()

        asciidoctorj {
            requires 'rouge'
            attributes 'build-gradle': file('build.gradle'),
                    'endpoint-url': 'http://example.org',
                    'source-highlighter': 'rouge',
                    'imagesdir': '../resources/images',
                    'toc': 'left',
                    'icons': 'font',
                    'idprefix': '',
                    'idseparator': '-'
        }
    }

    asciidoctorRevealJs {
        sourceDir file("src/slides")

        baseDirFollowsSourceFile()

        resources {
            from("src/resources") {
                include '**'
                into '.'
            }
        }

        attributes 'build-gradle': file('build.gradle'),
                'endpoint-url': 'http://example.org',
                'source-highlighter': 'coderay',
                'coderay-css': 'style',
                'imagesdir': './images',
                'toc': 'left',
                'icons': 'font',
                'setanchors': '',
                'idprefix': 'slide-',
                'idseparator': '-',
                'docinfo': 'shared',
                'revealjs_theme': 'black',
                'revealjs_transition': 'linear',
                'revealjs_history': 'true',
                'revealjs_slideNumber': 'true'
    }

    task asciidoctor(dependsOn: [asciidoctorPdf, asciidoctorRevealJs])

    tasks.register('buildDistributionZip', Zip) {
        dependsOn asciidoctor
        from project.layout.buildDirectory.dir("docs/asciidocPdf")
        from project.layout.buildDirectory.dir("docs/asciidocRevealJs")
    }
}

task copyArtifactsForDistributionZip(description: 'Copies the artifacts that will be included in the distribution zip file') {
    dependsOn subprojects.collect { "${it.name}:asciidoctor" }
    def artifactDir = file("${buildDir}/toArchive")
    outputs.dir artifactDir

    doLast {
        subprojects.each { project ->
            def projectDir = project.file("${artifactDir}/${project.name}")
            copy {
                from project.layout.buildDirectory.dir("docs/asciidocPdf")
                from project.layout.buildDirectory.dir("docs/asciidocRevealJs")
                into projectDir
            }
        }
    }
}
task buildDistributionZip(type: Zip) {
    dependsOn 'copyArtifactsForDistributionZip'
    from copyArtifactsForDistributionZip.outputs.files
}